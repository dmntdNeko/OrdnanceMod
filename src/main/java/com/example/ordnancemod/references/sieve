//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package exnihilo.blocks;

import cpw.mods.fml.common.eventhandler.Event.Result;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import exnihilo.blocks.tileentities.TileEntitySieve;
import exnihilo.blocks.tileentities.TileEntitySieve.SieveMode;
import exnihilo.data.ModData;
import exnihilo.registries.SieveRegistry;
import java.util.List;
import net.minecraft.block.Block;
import net.minecraft.block.BlockContainer;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.IIcon;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;

public class BlockSieve extends BlockContainer {
    public static IIcon meshIcon;

    public BlockSieve() {
        super(Material.wood);
        this.setCreativeTab(CreativeTabs.tabDecorations);
        this.setHardness(2.0F);
        this.setBlockName("exnihilo.sifting_table");
        GameRegistry.registerTileEntity(TileEntitySieve.class, "exnihilo.sifting_table");
    }

    public BlockSieve(Material material) {
        super(material);
    }

    public void registerBlockIcons(IIconRegister register) {
        this.blockIcon = Blocks.planks.getIcon(0, 0);
        meshIcon = register.registerIcon("exnihilo:IconSieveMesh");
    }

    @SideOnly(Side.CLIENT)
    public void getSubBlocks(Item item, CreativeTabs tabs, List subItems) {
        for(int i = 0; i < 6; ++i) {
            subItems.add(new ItemStack(item, 1, i));
        }

    }

    public int getRenderType() {
        return -1;
    }

    public boolean isOpaqueCube() {
        return false;
    }

    public boolean renderAsNormalBlock() {
        return false;
    }

    public boolean hasTileEntity() {
        return true;
    }

    public int damageDropped(int metadata) {
        return metadata;
    }

    public TileEntity createNewTileEntity(World world, int meta) {
        return new TileEntitySieve();
    }

    public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int side, float hitX, float hitY, float hitZ) {
        if (player == null) {
            return false;
        } else {
            PlayerInteractEvent e = new PlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, x, y, z, side, world);
            if (!MinecraftForge.EVENT_BUS.post(e) && e.getResult() != Result.DENY && e.useBlock != Result.DENY) {
                TileEntitySieve sieve = (TileEntitySieve)world.getTileEntity(x, y, z);
                if (sieve.mode == SieveMode.EMPTY && player.getCurrentEquippedItem() != null) {
                    ItemStack held = player.getCurrentEquippedItem();
                    if (SieveRegistry.registered(Block.getBlockFromItem(held.getItem()), held.getItemDamage())) {
                        sieve.addSievable(Block.getBlockFromItem(held.getItem()), held.getItemDamage());
                        this.removeCurrentItem(player);
                    }
                } else if (world.isRemote) {
                    sieve.ProcessContents(false);
                } else if (sieve.mode != SieveMode.EMPTY && (this.isHuman(player) || ModData.ALLOW_SIEVE_AUTOMATION)) {
                    sieve.ProcessContents(false);
                }

                return true;
            } else {
                return false;
            }
        }
    }

    private boolean isHuman(EntityPlayer player) {
        boolean isHuman = player instanceof EntityPlayerMP;
        if (player.toString().contains("CoFH")) {
            isHuman = false;
        }

        return isHuman;
    }

    private void removeCurrentItem(EntityPlayer player) {
        ItemStack item = getCurrentEquippedItem();
        if (!player.capabilities.isCreativeMode) {
            --item.stackSize;
            if (item.stackSize == 0) {
                item = null;
            }
        }

    }
}
