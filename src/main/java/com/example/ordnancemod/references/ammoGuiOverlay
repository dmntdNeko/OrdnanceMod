//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package techguns.events;

import cpw.mods.fml.common.eventhandler.EventPriority;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType;
import net.minecraftforge.common.ForgeHooks;
import org.lwjgl.opengl.GL11;
import techguns.TGItems;
import techguns.Techguns;
import techguns.extendedproperties.TechgunsExtendedPlayerProperties;
import techguns.gui.playerinventory.GuiTGPlayerInventory;
import techguns.gui.playerinventory.TGPlayerInventory;
import techguns.items.armors.ItemTGSpecialSlotAmmo;
import techguns.items.armors.PoweredArmor;
import techguns.items.guns.GenericGun;

public class GuiOverlayAmmoCount extends Gui {
    Minecraft mc = Minecraft.getMinecraft();
    private static final ResourceLocation ICONS = new ResourceLocation("textures/gui/icons.png");

    public GuiOverlayAmmoCount() {
    }

    @SubscribeEvent(
        priority = EventPriority.NORMAL,
        receiveCanceled = false
    )
    public void onEvent(RenderGameOverlayEvent event) {
        if (!event.isCancelable() && event.type == ElementType.EXPERIENCE) {
            EntityPlayer ply = this.mc.thePlayer;
            TechgunsExtendedPlayerProperties props = TechgunsExtendedPlayerProperties.get(ply);
            ItemStack item = ply.getCurrentEquippedItem();
            ScaledResolution sr = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
            int offsetY = sr.getScaledHeight() - 20;
            ItemStack backslot;
            int x;
            if (item != null && item.getItem() instanceof GenericGun) {
                GenericGun gun = (GenericGun)item.getItem();
                backslot = gun.getAmmo();
                x = Techguns.countMags(ply.inventory.mainInventory, backslot, 0, ply.inventory.mainInventory.length);
                x += Techguns.countMags(props.TG_inventory.inventory, backslot, 6, 12);
                if (gun.getAmmoCount() > 1) {
                    x /= gun.getAmmoCount();
                }

                String text = gun.getAmmoLeftCountTooltip(item) + "/" + gun.getClipsizeTooltip() + EnumChatFormatting.YELLOW + "x" + x;
                this.mc.fontRenderer.drawString(text, sr.getScaledWidth() + 1 - text.length() * 6, sr.getScaledHeight() - this.mc.fontRenderer.FONT_HEIGHT - 2, -1);
                if (props != null && props.showTGHudElements) {
                    this.mc.getTextureManager().bindTexture(GuiTGPlayerInventory.texture);
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, 242 + 7 * (props.enableSafemode ? 1 : 0), 14, 7, 7);
                }
            }

            if (props != null && props.showTGHudElements) {
                offsetY = sr.getScaledHeight() - 30;
                this.mc.getTextureManager().bindTexture(GuiTGPlayerInventory.texture);
                ItemStack chest = ply.inventory.armorInventory[2];
                ItemStack armor;
                if (chest != null && chest.getItem() instanceof PoweredArmor) {
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, 249, 35, 7, 7);
                    PoweredArmor pwrchest = (PoweredArmor)chest.getItem();
                    double percent = (double)PoweredArmor.getPower(chest) * 1.0 / ((double)pwrchest.maxpower * 1.0);
                    armor = pwrchest.getBattery();
                    int count = Techguns.countMags(ply.inventory.mainInventory, armor, 0, ply.inventory.mainInventory.length);
                    count += Techguns.countMags(props.TG_inventory.inventory, armor, 6, 12);
                    String text = EnumChatFormatting.YELLOW + "" + count + "x" + EnumChatFormatting.WHITE + (int)(percent * 100.0) + "%";
                    this.mc.fontRenderer.drawString(text, sr.getScaledWidth() - 2 - text.length() * 6 - 8 + 24, offsetY, -1);
                    offsetY -= 10;
                }

                TGPlayerInventory var10001 = props.TG_inventory;
                backslot = props.TG_inventory.inventory[1];
                if (backslot != null && (backslot.getItem() == TGItems.jetpack || backslot.getItem() == TGItems.jumppack || backslot.getItem() == TGItems.antiGravPack)) {
                    x = 242;
                    if (props.enableJetpack) {
                        x += 7;
                    }

                    this.mc.getTextureManager().bindTexture(GuiTGPlayerInventory.texture);
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, x, 42, 7, 7);
                    double percent = 1.0 - (double)((float)backslot.func_77952_i() * 1.0F / ((float)backslot.func_77958_k() * 1.0F));
                    ItemStack ammoitem = ((ItemTGSpecialSlotAmmo)backslot.getItem()).getAmmo();
                    int count = Techguns.countMags(ply.inventory.mainInventory, ammoitem, 0, ply.inventory.mainInventory.length);
                    count += Techguns.countMags(props.TG_inventory.inventory, ammoitem, 6, 12);
                    String text = EnumChatFormatting.YELLOW + "" + count + "x" + EnumChatFormatting.WHITE + (int)(percent * 100.0) + "%";
                    this.mc.fontRenderer.drawString(text, sr.getScaledWidth() - 2 - text.length() * 6 - 8 + 24, offsetY, -1);
                    offsetY -= 10;
                }

                this.mc.getTextureManager().bindTexture(GuiTGPlayerInventory.texture);
                if (Techguns.proxy.getHasNightvision()) {
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, 242 + 7 * (props.enableNightVision ? 1 : 0), 7, 7, 7);
                    offsetY -= 10;
                }

                if (Techguns.proxy.getHasStepassist()) {
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, 242 + 7 * (props.enableStepAssist ? 1 : 0), 21, 7, 7);
                    offsetY -= 10;
                }

                byte mode = 0;

                for(int i = 0; i < 4; ++i) {
                    armor = ply.inventory.armorInventory[i];
                    if (armor != null) {
                        double dur = (double)(armor.func_77958_k() - armor.func_77960_j()) * 1.0 / ((double)armor.func_77958_k() * 1.0);
                        if (dur < 0.35 && mode < 1) {
                            mode = 1;
                        } else if (armor.func_77960_j() >= armor.func_77958_k() - 1) {
                            mode = 2;
                            break;
                        }
                    }
                }

                if (mode == 2) {
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, 249, 28, 7, 7);
                    offsetY -= 10;
                } else if (mode == 1) {
                    this.drawTexturedModalRect(sr.getScaledWidth() - 10, offsetY, 242, 28, 7, 7);
                    offsetY -= 10;
                }
            }

        }
    }

    @SubscribeEvent(
        priority = EventPriority.NORMAL,
        receiveCanceled = false
    )
    public void onEventArmorBar(RenderGameOverlayEvent.Pre event) {
        if (event.type == ElementType.ARMOR) {
            EntityPlayer ply = this.mc.thePlayer;
            TechgunsExtendedPlayerProperties props = TechgunsExtendedPlayerProperties.get(ply);
            if (props != null && props.showTGHudElements) {
                event.setCanceled(true);
                int width = event.resolution.getScaledWidth();
                int height = event.resolution.getScaledHeight();
                int left_height = 48;
                GL11.glEnable(3042);
                int left = width / 2 - 91 - 2;
                int top = height - left_height;
                int level = ForgeHooks.getTotalArmorValue(this.mc.thePlayer);
                this.mc.getTextureManager().bindTexture(GuiTGPlayerInventory.texture);

                for(int i = 1; level > 0 && i < 24; i += 2) {
                    if (i < level) {
                        this.drawTexturedModalRect(left, top, 0, 168, 8, 8);
                    } else if (i == level) {
                        this.drawTexturedModalRect(left, top, 8, 168, 8, 8);
                    } else if (i > level) {
                        this.drawTexturedModalRect(left, top, 16, 168, 8, 8);
                    }

                    left += 7;
                }

                left_height += 10;
                this.mc.getTextureManager().bindTexture(ICONS);
                GL11.glDisable(3042);
            }

        }
    }
}
