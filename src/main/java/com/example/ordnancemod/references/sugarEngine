//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.domochevsky.quiverbow.weapons;

import com.domochevsky.quiverbow.Helper;
import com.domochevsky.quiverbow.Main;
import com.domochevsky.quiverbow.ammo.GatlingAmmo;
import com.domochevsky.quiverbow.ammo.Part_GatlingBarrel;
import com.domochevsky.quiverbow.ammo.Part_GatlingBody;
import com.domochevsky.quiverbow.projectiles.SugarRod;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import java.util.List;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.world.World;
import net.minecraftforge.common.config.Configuration;

public class SugarEngine extends _WeaponBase {
    private String nameInternal = "Sugar Engine";
    public float Spread;

    public SugarEngine() {
        super(200);
        ItemStack ammo = Helper.getAmmoStack(GatlingAmmo.class, 0);
        this.setMaxDamage(ammo.getMaxDamage());
    }

    @SideOnly(Side.CLIENT)
    public void registerIcons(IIconRegister par1IconRegister) {
        this.Icon = par1IconRegister.registerIcon("quiverchevsky:weapons/SugarGatling");
        this.Icon_Empty = par1IconRegister.registerIcon("quiverchevsky:weapons/SugarGatling_Empty");
    }

    int getSpinupTime() {
        return 30;
    }

    public ItemStack onItemRightClick(ItemStack stack, World world, EntityPlayer player) {
        if (world.isRemote) {
            return stack;
        } else if (this.getDamage(stack) >= this.getMaxDamage()) {
            return stack;
        } else if (player.isSneaking()) {
            this.dropMagazine(world, stack, player);
            return stack;
        } else {
            this.doSingleFire(stack, world, player);
            return stack;
        }
    }

    public void doSingleFire(ItemStack stack, World world, Entity entity) {
        if (!stack.hasTagCompound()) {
            stack.setTagCompound(new NBTTagCompound());
        }

        stack.stackTagCompound.setInteger("spinDownImmunity", 20);
        if (stack.stackTagCompound.getInteger("spinning") >= this.getSpinupTime()) {
            this.setBurstFire(stack, 4);
        }
    }

    private void dropMagazine(World world, ItemStack stack, Entity entity) {
        if (!(entity instanceof EntityPlayer)) {
            this.setCooldown(stack, 80);
        } else {
            ItemStack clipStack = Helper.getAmmoStack(GatlingAmmo.class, stack.getItemDamage());
            stack.setItemDamage(this.getMaxDamage());
            EntityItem entityitem = new EntityItem(world, entity.posX, entity.posY + 1.0, entity.posZ, clipStack);
            entityitem.delayBeforeCanPickUp = 10;
            if (entity.captureDrops) {
                entity.capturedDrops.add(entityitem);
            } else {
                world.spawnEntityInWorld(entityitem);
            }

            world.playSoundAtEntity(entity, "random.break", 1.0F, 0.5F);
        }
    }

    public void onUpdate(ItemStack stack, World world, Entity entity, int animTick, boolean holdingItem) {
        if (!world.isRemote) {
            if (this.getCooldown(stack) > 0) {
                this.setCooldown(stack, this.getCooldown(stack) - 1);
            }

            if (this.getCooldown(stack) == 1) {
                this.doCooldownSFX(world, entity);
            }

            if (stack.getTagCompound() == null) {
                stack.setTagCompound(new NBTTagCompound());
            }

            if (stack.stackTagCompound.getInteger("spinDownImmunity") == 0) {
                if (stack.stackTagCompound.getInteger("spinning") > 0) {
                    stack.stackTagCompound.setInteger("spinning", stack.stackTagCompound.getInteger("spinning") - 1);
                    this.doSpinSFX(stack, world, entity);
                }
            } else {
                stack.stackTagCompound.setInteger("spinDownImmunity", stack.stackTagCompound.getInteger("spinDownImmunity") - 1);
                if (stack.stackTagCompound.getInteger("spinning") < this.getSpinupTime()) {
                    stack.stackTagCompound.setInteger("spinning", stack.stackTagCompound.getInteger("spinning") + 1);
                }

                this.doSpinSFX(stack, world, entity);
            }

            if (this.getBurstFire(stack) > 0) {
                this.setBurstFire(stack, this.getBurstFire(stack) - 1);
                if (stack.getItemDamage() < stack.getMaxDamage() && holdingItem) {
                    this.doBurstFire(stack, world, entity);
                    if (this.consumeAmmo(stack, entity, 1)) {
                        this.dropMagazine(world, stack, entity);
                    }
                }
            }

        }
    }

    private void doBurstFire(ItemStack stack, World world, Entity entity) {
        Helper.knockUserBack(entity, this.Kickback);
        float spreadHor = world.rand.nextFloat() * this.Spread - this.Spread / 2.0F;
        float spreadVert = world.rand.nextFloat() * this.Spread - this.Spread / 2.0F;
        int dmg_range = this.DmgMax - this.DmgMin;
        int dmg = world.rand.nextInt(dmg_range + 1);
        dmg += this.DmgMin;
        SugarRod projectile = new SugarRod(world, entity, (float)this.Speed, spreadHor, spreadVert);
        projectile.damage = dmg;
        world.spawnEntityInWorld(projectile);
        world.playSoundAtEntity(entity, "random.wood_click", 1.0F, 0.2F);
        world.playSoundAtEntity(entity, "random.break", 0.6F, 3.0F);
    }

    private void doSpinSFX(ItemStack stack, World world, Entity player) {
        int spin = stack.stackTagCompound.getInteger("spinning");
        float volume = 0.8F;
        float pitch = 1.8F;
        if (spin == 1) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 5) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 9) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 13) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 16) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 19) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 21) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 23) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 25) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 27) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 28) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin == 29) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        } else if (spin >= 30) {
            world.playSoundAtEntity(player, "random.wood_click", volume, pitch);
        }

    }

    @SideOnly(Side.CLIENT)
    public void addInformation(ItemStack stack, EntityPlayer player, List list, boolean par4) {
        super.addInformation(stack, player, list, par4);
        if (player.capabilities.isCreativeMode) {
            list.add(EnumChatFormatting.BLUE + "Sugar Rods: INFINITE / " + this.getMaxDamage());
        } else {
            int ammo = this.getMaxDamage() - this.getDamage(stack);
            list.add(EnumChatFormatting.BLUE + "Sugar Rods: " + ammo + " / " + this.getMaxDamage());
        }

        list.add(EnumChatFormatting.BLUE + "Damage: " + this.DmgMin + " - " + this.DmgMax + " per rod.");
        list.add(EnumChatFormatting.GREEN + "Fires ~20 rods per second.");
        list.add(EnumChatFormatting.RED + "Start-up Time: " + this.displayInSec(this.getSpinupTime()) + " sec.");
        list.add(EnumChatFormatting.YELLOW + "Crouch-use to drop the current clip.");
        list.add(EnumChatFormatting.YELLOW + "Craft with 1 Clip of Sugar Rods");
        list.add(EnumChatFormatting.YELLOW + "to reload when empty.");
        list.add("So many barrels. Why so many barrels?");
    }

    public void addProps(FMLPreInitializationEvent event, Configuration config) {
        this.Enabled = config.get(this.nameInternal, "Am I enabled? (default true)", true).getBoolean(true);
        this.namePublic = config.get(this.nameInternal, "What's my name?", this.nameInternal).getString();
        this.DmgMin = config.get(this.nameInternal, "What damage am I dealing, at least? (default 1)", 1).getInt();
        this.DmgMax = config.get(this.nameInternal, "What damage am I dealing, tops? (default 3)", 3).getInt();
        this.Speed = config.get(this.nameInternal, "How fast are my projectiles? (default 2.0 BPT (Blocks Per Tick))", 2.0).getDouble();
        this.Kickback = (byte)config.get(this.nameInternal, "How hard do I kick the user back when firing? (default 1)", 1).getInt();
        this.Spread = (float)config.get(this.nameInternal, "How accurate am I? (default 10 spread)", 10).getDouble();
        this.isMobUsable = config.get(this.nameInternal, "Can I be used by QuiverMobs? (default true. They'll probably figure it out.)", true).getBoolean(true);
    }

    public void addRecipes() {
        if (this.Enabled) {
            GameRegistry.addRecipe(new ItemStack(this, 1, this.getMaxDamage()), new Object[]{"b b", "b b", " m ", 'b', Helper.getAmmoStack(Part_GatlingBarrel.class, 0), 'm', Helper.getAmmoStack(Part_GatlingBody.class, 0)});
        } else if (Main.noCreative) {
            this.setCreativeTab((CreativeTabs)null);
        }

        Helper.registerAmmoRecipe(GatlingAmmo.class, this);
    }

    public String getTexPath(ItemStack stack) {
        if (stack.getItemDamage() >= stack.getMaxDamage()) {
            return "SugarGatling_empty";
        } else {
            return this.getCooldown(stack) > 0 ? "SugarGatling_hot" : "SugarGatling";
        }
    }
}
