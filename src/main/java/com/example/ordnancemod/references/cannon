//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package ckathode.weaponmod.entity;

import ckathode.weaponmod.BalkonsWeaponMod;
import ckathode.weaponmod.entity.projectile.EntityCannonBall;
import java.util.Iterator;
import java.util.List;
import net.minecraft.entity.Entity;
import net.minecraft.entity.effect.EntityLightningBolt;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.DamageSource;
import net.minecraft.util.EntityDamageSource;
import net.minecraft.util.EntityDamageSourceIndirect;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;

public class EntityCannon extends EntityBoat {
    public EntityCannon(World world) {
        super(world);
        this.preventEntitySpawning = true;
        this.rotationPitch = -20.0F;
        this.setRotation(this.rotationYaw, this.rotationPitch);
        this.setSize(1.5F, 1.0F);
        this.yOffset = this.height / 2.0F;
    }

    public EntityCannon(World world, double d, double d1, double d2) {
        this(world);
        this.setPosition(d, d1 + (double)this.yOffset, d2);
        this.motionX = 0.0;
        this.motionY = 0.0;
        this.motionZ = 0.0;
        this.prevPosX = d;
        this.prevPosY = d1;
        this.prevPosZ = d2;
    }

    protected void entityInit() {
        this.dataWatcher.addObject(17, 0);
        this.dataWatcher.addObject(18, (byte)1);
        this.dataWatcher.addObject(19, 0);
        this.dataWatcher.addObject(20, (byte)0);
        this.dataWatcher.addObject(21, Short.valueOf((short)0));
        this.dataWatcher.addObject(22, (byte)0);
    }

    public AxisAlignedBB getCollisionBox(Entity entity) {
        return entity.boundingBox;
    }

    public AxisAlignedBB getBoundingBox() {
        return this.boundingBox;
    }

    public boolean canBePushed() {
        return false;
    }

    public double getMountedYOffset() {
        return 0.15;
    }

    public boolean attackEntityFrom(DamageSource damagesource, float damage) {
        if (!this.worldObj.isRemote && !this.isDead) {
            if (damagesource instanceof EntityDamageSourceIndirect) {
                if (((EntityDamageSource)damagesource).getEntity() == this.riddenByEntity) {
                    return true;
                }
            } else if (damagesource instanceof EntityDamageSource && ((EntityDamageSource)damagesource).damageType.equals("player")) {
                EntityPlayer player = (EntityPlayer)((EntityPlayer)((EntityDamageSource)damagesource).getEntity());
                if (player.inventory.getCurrentItem() == null) {
                    this.dropItem(BalkonsWeaponMod.cannon, 1);
                    if (this.isLoaded() || this.isLoading()) {
                        this.dropItem(BalkonsWeaponMod.cannonBall, 1);
                        this.dropItem(Items.gunpowder, 1);
                    }

                    this.setDead();
                    return true;
                }
            }

            this.setRockDirection(-this.getRockDirection());
            this.setTimeSinceHit(10);
            this.setCurrentDamage(this.getCurrentDamage() + (int)damage * 5);
            this.setBeenAttacked();
            if (this.getCurrentDamage() > 100) {
                if (this.riddenByEntity != null) {
                    this.riddenByEntity.mountEntity(this);
                }

                for(int j = 0; j < 6; ++j) {
                    this.dropItemWithChance(Items.ironIngot, (int)damage, 1);
                }

                this.dropItemWithChance(Items.flint, (int)damage, 1);
                this.dropItemWithChance(Item.getItemFromBlock(Blocks.log), (int)damage, 1);
                if (this.isLoaded() || this.isLoading()) {
                    this.dropItem(BalkonsWeaponMod.cannonBall, 1);
                    this.dropItem(Items.gunpowder, 1);
                }

                this.setDead();
            }

            return true;
        } else {
            return true;
        }
    }

    public void dropItemWithChance(Item item, int chance, int amount) {
        if (this.rand.nextInt(chance) < 10) {
            this.dropItem(item, amount);
        }

    }

    public void performHurtAnimation() {
        this.setRockDirection(-this.getRockDirection());
        this.setTimeSinceHit(10);
        this.setCurrentDamage(this.getCurrentDamage() + 10);
    }

    public boolean canBeCollidedWith() {
        return !this.isDead;
    }

    public void onUpdate() {
        this.onEntityUpdate();
    }

    public void onEntityUpdate() {
        super.onEntityUpdate();
        int i = this.getTimeSinceHit();
        if (i > 0) {
            this.setTimeSinceHit(i - 1);
        }

        i = this.getCurrentDamage();
        if (i > 0) {
            this.setCurrentDamage(i - this.rand.nextInt(2));
        }

        this.motionY -= 0.1;
        if (this.onGround) {
            this.motionX *= 0.1;
            this.motionZ *= 0.1;
        }

        this.motionX *= 0.98;
        this.motionY *= 0.98;
        this.motionZ *= 0.98;
        if (!this.onGround) {
            this.fallDistance = (float)((double)this.fallDistance + -this.motionY);
        }

        if (this.riddenByEntity != null) {
            float yaw = this.riddenByEntity.rotationYaw;
            float pitch = this.riddenByEntity.rotationPitch;
            this.rotationYaw = (yaw - 180.0F) % 360.0F;
            this.rotationPitch = pitch;
        }

        this.setRotation(this.rotationYaw, this.rotationPitch);
        this.moveEntity(this.motionX, this.motionY, this.motionZ);
        List<Entity> list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.2, 0.0, 0.2));
        if (list != null && !list.isEmpty()) {
            Iterator i$ = list.iterator();

            while(i$.hasNext()) {
                Entity entity = (Entity)i$.next();
                if (entity != this.riddenByEntity && entity.canBePushed()) {
                    entity.applyEntityCollision(this);
                }
            }
        }

        if (this.riddenByEntity != null && this.riddenByEntity.isDead) {
            this.riddenByEntity = null;
        }

        if (this.isLoading()) {
            this.setLoadTimer(this.getLoadTimer() - 1);
            this.handleReloadTime();
        }

    }

    protected void fall(float f) {
        super.fall(f);
        int i = MathHelper.floorFloat(f);
        i *= 2;
        this.attackEntityFrom(DamageSource.fall, (float)i);
    }

    public void handleReloadTime() {
        int l = this.getLoadTimer();
        if (l > 0) {
            if (l != 80 && l != 70 && l != 60) {
                if (l == 40) {
                    this.worldObj.playSoundAtEntity(this, "random.breath", 0.7F, 1.2F / (this.rand.nextFloat() * 0.2F + 10.0F));
                }
            } else {
                this.worldObj.playSoundAtEntity(this, "tile.piston.in", 0.5F, 1.2F / (this.rand.nextFloat() * 0.8F + 0.6F));
            }
        } else {
            this.setReloadInfo(true, 0);
        }

    }

    public void fireCannon() {
        if (this.isLoaded()) {
            if (!this.worldObj.isRemote) {
                EntityCannonBall entitycannonball = new EntityCannonBall(this.worldObj, this, this.isSuperPowered());
                this.worldObj.spawnEntityInWorld(entitycannonball);
            }

            this.setReloadInfo(false, 0);
            this.fireEffects();
        }
    }

    public void fireEffects() {
        this.worldObj.playSoundAtEntity(this, "random.explode", 8.0F, 1.0F / (this.rand.nextFloat() * 0.8F + 0.9F));
        this.worldObj.playSoundAtEntity(this, "ambient.weather.thunder", 8.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.6F));
        float yaw = (float)Math.toRadians((double)this.rotationYaw);
        double d = (double)(-MathHelper.sin(yaw) * -1.0F);
        double d1 = (double)(MathHelper.cos(yaw) * -1.0F);

        for(int i = 0; i < 20; ++i) {
            this.worldObj.spawnParticle("smoke", this.posX + d + this.rand.nextDouble() * 0.5 - 0.25, this.posY + this.rand.nextDouble() * 0.5, this.posZ + d1 + this.rand.nextDouble() * 0.5 - 0.25, this.rand.nextDouble() * 0.1 - 0.05, this.rand.nextDouble() * 0.1 - 0.05, this.rand.nextDouble() * 0.1 - 0.05);
        }

        if (this.riddenByEntity != null) {
            Entity rider = this.riddenByEntity;
            rider.rotationPitch += 10.0F;
        }

        this.attackEntityFrom(DamageSource.generic, 2.0F);
    }

    public void setReloadInfo(boolean loaded, int reloadtime) {
        this.setLoaded(loaded);
        this.setLoadTimer(reloadtime);
    }

    public void startLoadingCannon() {
        if (!this.isLoaded() || this.isLoading()) {
            this.setReloadInfo(false, 100);
        }
    }

    public void updateRiderPosition() {
        if (this.riddenByEntity != null) {
            float f = 0.85F;
            double d = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.141593F) * f);
            double d1 = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.141593F) * f);
            this.riddenByEntity.setPosition(this.posX + d, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + d1);
        }

    }

    public float getShadowSize() {
        return 1.0F;
    }

    protected void func_70014_b(NBTTagCompound nbttagcompound) {
        nbttagcompound.setFloat("falld", this.fallDistance);
        nbttagcompound.setBoolean("load", this.isLoaded());
        nbttagcompound.setShort("ldtime", (short)this.getLoadTimer());
    }

    protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
        this.setPosition(this.posX, this.posY, this.posZ);
        this.setRotation(this.rotationYaw, this.rotationPitch);
        this.fallDistance = nbttagcompound.getFloat("falld");
        this.setLoaded(nbttagcompound.getBoolean("load"));
        this.setLoadTimer(nbttagcompound.getShort("ldtime"));
    }

    public boolean interactFirst(EntityPlayer entityplayer) {
        ItemStack itemstack = entityplayer.getCurrentEquippedItem();
        Item item = itemstack == null ? null : itemstack.getItem();
        if (item == BalkonsWeaponMod.cannonBall && !this.isLoaded() && !this.isLoading() && entityplayer.inventory.consumeInventoryItem(Items.gunpowder)) {
            if (entityplayer.inventory.consumeInventoryItem(BalkonsWeaponMod.cannonBall)) {
                this.startLoadingCannon();
                return false;
            } else {
                this.dropItem(Items.gunpowder, 1);
                return true;
            }
        } else if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != entityplayer) {
            return true;
        } else {
            if (!this.worldObj.isRemote) {
                entityplayer.mountEntity(this);
            }

            return true;
        }
    }

    public void onStruckByLightning(EntityLightningBolt entitylightningbolt) {
        this.attackEntityFrom((DamageSource)null, 100.0F);
        this.setSuperPowered(true);
    }

    public void setLoaded(boolean flag) {
        this.dataWatcher.updateObject(20, (byte)(flag ? 1 : 0));
    }

    public void setLoadTimer(int time) {
        this.dataWatcher.updateObject(21, (short)time);
    }

    public void setSuperPowered(boolean flag) {
        this.dataWatcher.updateObject(22, (byte)(flag ? 1 : 0));
    }

    public boolean isLoading() {
        return this.getLoadTimer() > 0;
    }

    public boolean isLoaded() {
        return this.dataWatcher.getWatchableObjectByte(20) != 0;
    }

    public int getLoadTimer() {
        return this.dataWatcher.getWatchableObjectShort(21);
    }

    public boolean isSuperPowered() {
        return this.dataWatcher.getWatchableObjectByte(22) != 0;
    }

    public void setTimeSinceHit(int i) {
        this.dataWatcher.updateObject(17, i);
    }

    public void setRockDirection(int i) {
        this.dataWatcher.updateObject(18, (byte)i);
    }

    public void setCurrentDamage(int i) {
        this.dataWatcher.updateObject(19, i);
    }

    public int getTimeSinceHit() {
        return this.dataWatcher.getWatchableObjectInt(17);
    }

    public int getRockDirection() {
        return this.dataWatcher.getWatchableObjectByte(18);
    }

    public int getCurrentDamage() {
        return this.dataWatcher.getWatchableObjectInt(19);
    }
}
